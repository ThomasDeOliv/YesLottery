// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yes.Server.Datas.DbAccess;

#nullable disable

namespace YES.Server.Datas.DbAccess.Migrations
{
    [DbContext(typeof(YesDbContext))]
    [Migration("20221214164418_AddYESDbContext")]
    partial class AddYESDbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Yes.Server.Datas.DbAccess.Entities.DrawEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("private_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DrawedNumbers")
                        .HasMaxLength(17)
                        .HasColumnType("char(17)")
                        .HasColumnName("drawed_numbers")
                        .IsFixedLength();

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_datetime");

                    b.HasKey("Id");

                    b.ToTable("draw");
                });

            modelBuilder.Entity("Yes.Server.Datas.DbAccess.Entities.RankEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Descriptor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("descriptor");

                    b.HasKey("Id");

                    b.ToTable("rank");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descriptor = "First Rank, all 6 numbers are valid"
                        },
                        new
                        {
                            Id = 2,
                            Descriptor = "Second Rank, 5 of the 6 numbers are valid"
                        },
                        new
                        {
                            Id = 3,
                            Descriptor = "Third Rank, 4 of the 6 numbers are valid"
                        },
                        new
                        {
                            Id = 4,
                            Descriptor = "Fourth Rank, less than 4 numbers are valid..."
                        },
                        new
                        {
                            Id = 5,
                            Descriptor = "Default Rank before until the end of a draw"
                        });
                });

            modelBuilder.Entity("Yes.Server.Datas.DbAccess.Entities.StatisticEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FKDrawId")
                        .HasColumnType("int")
                        .HasColumnName("fk_draw_id");

                    b.Property<int>("FKRankId")
                        .HasColumnType("int")
                        .HasColumnName("fk_rank_id");

                    b.Property<int>("PeopleByRank")
                        .HasColumnType("int")
                        .HasColumnName("people_by_rank");

                    b.HasKey("Id");

                    b.HasIndex("FKDrawId");

                    b.HasIndex("FKRankId");

                    b.ToTable("statistic");
                });

            modelBuilder.Entity("Yes.Server.Datas.DbAccess.Entities.TicketEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("private_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(22)
                        .HasColumnType("char(22)")
                        .HasColumnName("access_code")
                        .IsFixedLength();

                    b.Property<int>("FKDrawId")
                        .HasColumnType("int")
                        .HasColumnName("fk_draw_id");

                    b.Property<int>("FKRankId")
                        .HasColumnType("int")
                        .HasColumnName("fk_rank_id");

                    b.Property<DateTime>("GameDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("played_datetime");

                    b.Property<string>("PlayedNumbers")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("char(17)")
                        .HasColumnName("played_numbers")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("FKDrawId");

                    b.HasIndex("FKRankId");

                    b.ToTable("ticket");
                });

            modelBuilder.Entity("Yes.Server.Datas.DbAccess.Entities.StatisticEntity", b =>
                {
                    b.HasOne("Yes.Server.Datas.DbAccess.Entities.DrawEntity", "Draw")
                        .WithMany("Statistics")
                        .HasForeignKey("FKDrawId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Yes.Server.Datas.DbAccess.Entities.RankEntity", "Rank")
                        .WithMany("Statistics")
                        .HasForeignKey("FKRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Draw");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Yes.Server.Datas.DbAccess.Entities.TicketEntity", b =>
                {
                    b.HasOne("Yes.Server.Datas.DbAccess.Entities.DrawEntity", "Draw")
                        .WithMany("Tickets")
                        .HasForeignKey("FKDrawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yes.Server.Datas.DbAccess.Entities.RankEntity", "Rank")
                        .WithMany("Tickets")
                        .HasForeignKey("FKRankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Draw");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Yes.Server.Datas.DbAccess.Entities.DrawEntity", b =>
                {
                    b.Navigation("Statistics");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Yes.Server.Datas.DbAccess.Entities.RankEntity", b =>
                {
                    b.Navigation("Statistics");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
